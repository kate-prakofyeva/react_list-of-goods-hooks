{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","handleSort","type","goods","visibleGoods","ALPHABET","sort","a","b","localeCompare","LENGTH","length","reverse","console","log","getReorderedGoods","className","onClick","prevState","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAoCL,IAyEeE,EAzEH,WACV,MAAgCC,mBAAmBH,EAASI,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAkB,GAAtD,mBAAOI,EAAP,KAAmBC,EAAnB,KAWMC,EAAa,SAACC,GAAD,OAAoB,WACrCJ,EAAYI,KAGRC,EA/CD,SACLA,EACAN,EACAE,GAEA,IAAMK,EAAY,YAAOD,GAEzB,OAAQN,GACN,KAAKL,EAASa,SACZD,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC5C,MACF,KAAKhB,EAASkB,OACZN,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAE3C,KAAKnB,EAASI,MAahB,OAPIG,GACFK,EAAaQ,UAIfC,QAAQC,IAAIjB,EAAUE,GAEfK,EAoBOW,CAAkBtB,EAAiBI,EAAUE,GAE3D,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEd,KAAK,SACLc,UAAWnB,IAAaL,EAASa,SAC7B,iBACA,0BACJY,QAAShB,EAAWT,EAASa,UAL/B,iCAUA,wBACEH,KAAK,SACLc,UAAWnB,IAAaL,EAASkB,OAC7B,oBACA,6BACJO,QAAShB,EAAWT,EAASkB,QAL/B,4BAUA,wBACER,KAAK,SACLc,UAAWjB,EACP,oBACA,6BACJkB,QAtCc,WACpBjB,GAAc,SAAAkB,GAAS,OAAKA,MAgCxB,sBAUEnB,GAAcF,IAAaL,EAASI,OAElC,wBACEM,KAAK,SACLc,UAAU,4BACVC,QArDQ,WAClBnB,EAAYN,EAASI,MACrBI,GAAc,IAgDN,sBAUN,6BACE,6BACGG,EAAMgB,KAAI,SAAAC,GAAI,OAAK,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cCpHtDC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3db48702.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((a, b) => a.localeCompare(b));\n      break;\n    case SortType.LENGTH:\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n    case SortType.NONE:\n      break;\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\nconst App = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  const handleReverse = () => {\n    setIsReversed(prevState => !prevState);\n  };\n\n  const handleSort = (type: SortType) => () => {\n    setSortType(type);\n  };\n\n  const goods = getReorderedGoods(goodsFromServer, sortType, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortType === SortType.ALPHABET\n            ? 'button is-info'\n            : 'button is-info is-light'}\n          onClick={handleSort(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortType === SortType.LENGTH\n            ? 'button is-success'\n            : 'button is-success is-light'}\n          onClick={handleSort(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={isReversed\n            ? 'button is-warning'\n            : 'button is-warning is-light'}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortType !== SortType.NONE)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handleReset}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(good => (<li data-cy=\"Good\" key={good}>{good}</li>))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}